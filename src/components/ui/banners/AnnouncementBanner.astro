---
const { title, btnId, btnTitle, url } = Astro.props;

interface Props {
  title?: string;
  btnId: string;
  btnTitle: string;
  url: string;
}
---

<astro-banner btnId={btnId}>
  <div
    class="fixed bottom-0 start-1/2 z-50 mx-auto w-full -translate-x-1/2 transform p-6 sm:max-w-4xl"
    role="region"
    aria-label="Informational Banner"
  >
    <div
      class="rounded-xl bg-neutral-800 bg-[url('/avex3.png')] bg-contain bg-center bg-repeat-x p-4 text-center shadow-sm dark:bg-neutral-200"
      style="relative"
    >
      <div class="flex items-center justify-center">
        <div
          class="bg-[url('/moto.png')] bg-contain bg-center bg-repeat-x p-6 text-center shadow-sm"
        >
        </div>

        <div class="ml-auto">
          {
            title && (
              <p class="me-2 inline-block font-medium text-neutral-50 dark:text-neutral-700">
                {title}
              </p>
            )
          }
          <a
            href={url}
            target="_blank"
            class="g group relative grid overflow-hidden rounded-full px-4 py-1 shadow-[0_1000px_0_0_hsl(0_0%_20%)_inset] transition-colors duration-200"
          >
            <span>
              <span
                class="spark mask-gradient absolute inset-0 h-[100%] w-[100%] animate-flip overflow-hidden rounded-full [mask:linear-gradient(white,_transparent_50%)] before:absolute before:aspect-square before:w-[200%] before:rotate-[-90deg] before:animate-rotate before:bg-[conic-gradient(from_0deg,transparent_0_340deg,white_360deg)] before:content-[''] before:[inset:0_auto_auto_50%] before:[translate:-50%_-15%]"
              ></span>
            </span>
            <span
              class="backdrop group-hover:bg-slate-800 absolute inset-[1px] rounded-full bg-black transition-colors duration-200"
            ></span>
            <span class="text z-10 text-[#cbd5e1] group-hover:text-[#fa5115]">
              <div class="flex items-center">
                {btnTitle}
                <svg
                  class="size-4 flex-shrink-0 transition duration-300 group-hover:translate-x-1"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"><path d="m9 18 6-6-6-6"></path></svg>
              </div></span
            >
          </a>
        </div>

        <button
          type="button"
          class="ml-auto inline-flex items-center gap-x-2 rounded-full border border-transparent bg-gray-100 p-2 text-sm font-semibold text-gray-800 hover:bg-gray-200 disabled:pointer-events-none disabled:opacity-50 dark:bg-neutral-700 dark:text-neutral-50 dark:hover:bg-neutral-700/80 dark:hover:text-neutral-50 dark:focus:outline-none"
          id={btnId}
        >
          <span class="sr-only">Dismiss</span>
          <svg
            class="size-5 flex-shrink-0"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            ><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg
          >
        </button>
      </div>
    </div>
  </div>
</astro-banner>
<script>
  class AstroBanner extends HTMLElement {
    connectedCallback() {
      const btnId = this.getAttribute("btnId");
      const button = this.querySelector(`#${btnId}`);
      if (button != null) {
        button.addEventListener("click", () => this.remove());
      }
    }
  }

  customElements.define("astro-banner", AstroBanner);
</script>
